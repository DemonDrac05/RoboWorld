//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Mechanics/InputSystem/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""049e004c-2e76-442d-a9d3-7b1a77e52b99"",
            ""actions"": [
                {
                    ""name"": ""SwordAttack"",
                    ""type"": ""Button"",
                    ""id"": ""b2ab7041-76a5-462f-8d45-ffe3657adcde"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""5449f89f-c216-40c4-bffc-b208511e406c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MissileLaunch"",
                    ""type"": ""Button"",
                    ""id"": ""14d4d7c6-99c4-4003-8e50-ef9e856c1eed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BulletFire"",
                    ""type"": ""Button"",
                    ""id"": ""cde5de70-1817-4aa8-9662-7c3c480c1b29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b22b7efc-22c1-4bfb-811b-2708ea2d0b48"",
                    ""path"": ""<Keyboard>/#(X)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwordAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c488f8d1-822f-4dd7-b2db-cca573bd324d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87e1487f-a158-4f83-b6e4-cebc9a078f10"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": ""Hold(duration=1,pressPoint=0.75),Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MissileLaunch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1da2b80-6192-49db-8869-e0156d8b8503"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BulletFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SwordAttack = m_Gameplay.FindAction("SwordAttack", throwIfNotFound: true);
        m_Gameplay_Roll = m_Gameplay.FindAction("Roll", throwIfNotFound: true);
        m_Gameplay_MissileLaunch = m_Gameplay.FindAction("MissileLaunch", throwIfNotFound: true);
        m_Gameplay_BulletFire = m_Gameplay.FindAction("BulletFire", throwIfNotFound: true);
    }

    ~@GameInputActions()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, GameInputActions.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SwordAttack;
    private readonly InputAction m_Gameplay_Roll;
    private readonly InputAction m_Gameplay_MissileLaunch;
    private readonly InputAction m_Gameplay_BulletFire;
    public struct GameplayActions
    {
        private @GameInputActions m_Wrapper;
        public GameplayActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwordAttack => m_Wrapper.m_Gameplay_SwordAttack;
        public InputAction @Roll => m_Wrapper.m_Gameplay_Roll;
        public InputAction @MissileLaunch => m_Wrapper.m_Gameplay_MissileLaunch;
        public InputAction @BulletFire => m_Wrapper.m_Gameplay_BulletFire;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SwordAttack.started += instance.OnSwordAttack;
            @SwordAttack.performed += instance.OnSwordAttack;
            @SwordAttack.canceled += instance.OnSwordAttack;
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @MissileLaunch.started += instance.OnMissileLaunch;
            @MissileLaunch.performed += instance.OnMissileLaunch;
            @MissileLaunch.canceled += instance.OnMissileLaunch;
            @BulletFire.started += instance.OnBulletFire;
            @BulletFire.performed += instance.OnBulletFire;
            @BulletFire.canceled += instance.OnBulletFire;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SwordAttack.started -= instance.OnSwordAttack;
            @SwordAttack.performed -= instance.OnSwordAttack;
            @SwordAttack.canceled -= instance.OnSwordAttack;
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @MissileLaunch.started -= instance.OnMissileLaunch;
            @MissileLaunch.performed -= instance.OnMissileLaunch;
            @MissileLaunch.canceled -= instance.OnMissileLaunch;
            @BulletFire.started -= instance.OnBulletFire;
            @BulletFire.performed -= instance.OnBulletFire;
            @BulletFire.canceled -= instance.OnBulletFire;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnSwordAttack(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnMissileLaunch(InputAction.CallbackContext context);
        void OnBulletFire(InputAction.CallbackContext context);
    }
}
